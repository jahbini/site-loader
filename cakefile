#cakefile
spawn = require('child_process').spawn
exec = require('child_process').exec
chokidar=require 'chokidar'
fs = require 'fs'

Sites =
  stjohnsjim:3334
  bamboosnow:3335
siteArray = (key for key of Sites)


publishAll = () ->
    pubLog = "publish.log"
    pubStdOut = fs.createWriteStream pubLog
    stdoutMsgs=0
    console.log "starting publish of ",siteArray
    try
      publisher = spawn "coffee", [].concat './index.coffee', siteArray
    catch badHoodoo
      console.log "Bad Publish -",badHoodoo
      process.exit()

    publisher.on 'error',(badHoodoo)->
      console.log badHoodoo
      console.log "Death from Publish!"
      process.exit()

    publisher.stdout.on 'data', (data) ->
        stdoutMsgs++
        pubStdOut.write data

    publisher.stderr.on 'data', (data) ->
        console.log "PUBLISH ERROR::#{data}"

    publisher.on 'exit', (code) ->
        pubStdOut.close()
        console.log "Publisher:: exit with code: #{code}"

    return publisher

brunchify = (theSite,thePort,options) ->
    try
      console.log "Creating App for #{theSite}"
      opts=process.env
      opts["SITE"] = theSite
      brunch = spawn "brunch", ['watch', '-s', "-P", thePort],{
        env:opts
      }
    catch badHoodoo
      console.log badHoodoo
      process.exit()

    brunch.on 'error',(badHoodoo)->
      console.log badHoodoo
      console.log "Death from #{theSite}"
      process.exit()

    brunch.stdout.on 'data', (data) ->
        console.log "#{theSite}::#{data}"

    brunch.stderr.on 'data', (data) ->
        console.log "#{theSite}::#{data}"

    brunch.on 'exit', (code) ->
        console.log "#{theSite}:: exit with code: #{code}"

    return brunch

publishSites = (paths)->
  console.log "Generating new content for sites", paths
  unready=true
  x=chokidar.watch paths,
    persistent:true
    cwd: process.cwd()
  x.on 'error', (error)-> log("Watcher error: #{error}")
  x.on 'ready',()->
    console.log "Initial publication of sites"
    publishAll paths
    unready=false
  x.on 'all',(wha)->
    return if unready
    publishAll paths
    console.log "Incremental publication of sites"
  console.log "Chokidar enabled"
  console.log x


task 'upload',"Rsync all Sites to the Cloud.", ()->
  Rsync = require('rsync');
  for domain in fs.readdirSync 'domains'
    subSite = (require domain)[domain]
    console.log "Starting Rsync on site #{domain} -- #{subSite.title}"
    # Build the command
    rsync = new Rsync()
      .shell 'ssh'
      .flags 'vraz'
      .delete()
      .exclude '.git'
      .exclude '.DS_Store'
      .source "./public-#{domain}/"
      .destination subSite.rsyncDestination

    #Execute the command
    rsync.execute (error, code, cmd)->
      #we're done
      console.log "Error (#{error}) on rsync for #{subSite}" if error
      console.log "rsync exit code #{code}"
      console.log "rsync on #{subSite}:", cmd

Processes = {}
task 'go','start up the siteMaster build on sites', ()->
  console.log "start"
  s = ['./lib']
  for theSite, thePort of Sites
    console.log "brunchify - #{theSite} - http://localhost:#{thePort}/"
    Processes[theSite] = brunchify theSite,thePort
    s.push "node_modules/#{theSite}"
  console.log "starting Publisher on sites ",s
  publishSites s
  console.log "started"
